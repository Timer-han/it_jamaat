from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from sqlalchemy import select, and_
from sqlalchemy.orm import selectinload
from database.database import AsyncSessionLocal
from database.models import Event, Mentor, Lecture, Vacancy, Project, User
from datetime import datetime, timedelta
import json

router = Router()

@router.message(Command("start"))
async def start_command(message: Message):
    async with AsyncSessionLocal() as session:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                full_name=message.from_user.full_name
            )
            session.add(user)
            await session.commit()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="events")],
        [InlineKeyboardButton(text="üë®‚Äçüè´ –ú–µ–Ω—Ç–æ—Ä—ã", callback_data="mentors")],
        [InlineKeyboardButton(text="üìö –õ–µ–∫—Ü–∏–∏", callback_data="lectures")],
        [InlineKeyboardButton(text="üíº –í–∞–∫–∞–Ω—Å–∏–∏", callback_data="vacancies")],
        [InlineKeyboardButton(text="üöÄ –ü—Ä–æ–µ–∫—Ç—ã", callback_data="projects")]
    ])
    
    await message.answer(
        "–ê—Å—Å–∞–ª—è–º—É –∞–ª–µ–π–∫—É–º! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IT Jama'at! üïåüíª\n\n"
        "–ó–¥–µ—Å—å –º—É—Å—É–ª—å–º–∞–Ω–µ-–∞–π—Ç–∏—à–Ω–∏–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤, —É—á–∞—Ç—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è –≤–º–µ—Å—Ç–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "events")
async def show_events(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        result = await session.execute(
            select(Event)
            .options(selectinload(Event.mentor))
            .where(and_(Event.is_active == True, Event.date_time > datetime.utcnow()))
            .order_by(Event.date_time)
            .limit(10)
        )
        events = result.scalars().all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    current_time = datetime.now().strftime("%H:%M")
    
    if not events:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="events")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        text = f"üìÖ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
        try:
            await callback.message.edit_text(text, reply_markup=back_keyboard)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await callback.answer("üìÖ –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω")
        return
    
    text = f"üìÖ **–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:**\n\n"
    for event in events:
        mentor_name = event.mentor.name if event.mentor else "–ù–µ —É–∫–∞–∑–∞–Ω"
        text += f"üî∏ **{event.title}**\n"
        text += f"üìç {event.location or '–û–Ω–ª–∞–π–Ω'}\n"
        text += f"‚è∞ {event.date_time.strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üë®‚Äçüè´ {mentor_name}\n"
        if event.description:
            text += f"üìù {event.description[:100]}...\n"
        text += "\n"
    
    text += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="events")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    
    try:
        await callback.message.edit_text(text, reply_markup=back_keyboard, parse_mode="Markdown")
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await callback.answer("üìÖ –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω")

@router.callback_query(F.data == "mentors")
async def show_mentors(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Mentor).where(Mentor.is_active == True)
        )
        mentors = result.scalars().all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    current_time = datetime.now().strftime("%H:%M")
    
    if not mentors:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –º–µ–Ω—Ç–æ—Ä–æ–≤
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="mentors")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        text = f"üë®‚Äçüè´ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤\n\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
        try:
            await callback.message.edit_text(text, reply_markup=back_keyboard)
        except Exception:
            await callback.answer("üë®‚Äçüè´ –°–ø–∏—Å–æ–∫ –º–µ–Ω—Ç–æ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
        return
    
    text = f"üë®‚Äçüè´ **–ù–∞—à–∏ –º–µ–Ω—Ç–æ—Ä—ã:**\n\n"
    for mentor in mentors:
        text += f"üî∏ **{mentor.name}**\n"
        text += f"üíº {mentor.specialization or '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        if mentor.bio:
            text += f"üìù {mentor.bio[:100]}...\n"
        if mentor.contact_info:
            text += f"üìû {mentor.contact_info}\n"
        text += "\n"
    
    text += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="mentors")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    
    try:
        await callback.message.edit_text(text, reply_markup=back_keyboard, parse_mode="Markdown")
    except Exception:
        await callback.answer("üë®‚Äçüè´ –°–ø–∏—Å–æ–∫ –º–µ–Ω—Ç–æ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")

@router.callback_query(F.data == "lectures")
async def show_lectures(callback: CallbackQuery):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–µ–∫—Ü–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="lectures_programming")],
        [InlineKeyboardButton(text="üîí –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="lectures_security")],
        [InlineKeyboardButton(text="üìä Data Science", callback_data="lectures_data")],
        [InlineKeyboardButton(text="üåê Web —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", callback_data="lectures_web")],
        [InlineKeyboardButton(text="üì± Mobile —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", callback_data="lectures_mobile")],
        [InlineKeyboardButton(text="üéØ –í—Å–µ –ª–µ–∫—Ü–∏–∏", callback_data="lectures_all")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(
        "üìö **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ª–µ–∫—Ü–∏–π:**",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("lectures_"))
async def show_lectures_by_category(callback: CallbackQuery):
    category = callback.data.replace("lectures_", "")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    current_time = datetime.now().strftime("%H:%M")
    
    async with AsyncSessionLocal() as session:
        if category == "all":
            result = await session.execute(
                select(Lecture).options(selectinload(Lecture.mentor)).order_by(Lecture.uploaded_at.desc())
            )
        else:
            category_map = {
                "programming": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "security": "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", 
                "data": "Data Science",
                "web": "Web —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
                "mobile": "Mobile —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
            }
            result = await session.execute(
                select(Lecture)
                .options(selectinload(Lecture.mentor))
                .where(Lecture.category == category_map.get(category, category))
                .order_by(Lecture.uploaded_at.desc())
            )
        
        lectures = result.scalars().all()
    
    category_map = {
        "programming": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "security": "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", 
        "data": "Data Science",
        "web": "Web —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
        "mobile": "Mobile —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
    }
    
    if not lectures:
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ª–µ–∫—Ü–∏–π
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"lectures_{category}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="lectures")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        text = f"üìö –í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ª–µ–∫—Ü–∏–π\n\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
        try:
            await callback.message.edit_text(text, reply_markup=back_keyboard)
        except Exception:
            await callback.answer("üìö –°–ø–∏—Å–æ–∫ –ª–µ–∫—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω")
        return
    
    text = f"üìö **–õ–µ–∫—Ü–∏–∏ {'–ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º' if category == 'all' else category_map.get(category, category)}:**\n\n"
    
    for lecture in lectures[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        mentor_name = lecture.mentor.name if lecture.mentor else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        text += f"üî∏ **{lecture.title}**\n"
        text += f"üë®‚Äçüè´ {mentor_name}\n"
        text += f"üìÇ {lecture.category or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\n"
        if lecture.duration:
            text += f"‚è± {lecture.duration} –º–∏–Ω\n"
        if lecture.description:
            text += f"üìù {lecture.description[:80]}...\n"
        text += f"üìÖ {lecture.uploaded_at.strftime('%d.%m.%Y')}\n\n"
    
    text += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"lectures_{category}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="lectures")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    
    try:
        await callback.message.edit_text(text, reply_markup=back_keyboard, parse_mode="Markdown")
    except Exception:
        await callback.answer("üìö –°–ø–∏—Å–æ–∫ –ª–µ–∫—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω")

@router.callback_query(F.data == "vacancies")
async def show_vacancies(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Vacancy).where(Vacancy.is_active == True).order_by(Vacancy.posted_at.desc())
        )
        vacancies = result.scalars().all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    current_time = datetime.now().strftime("%H:%M")
    
    if not vacancies:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="vacancies")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        text = f"üíº –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π\n\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
        try:
            await callback.message.edit_text(text, reply_markup=back_keyboard)
        except Exception:
            await callback.answer("üíº –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω")
        return
    
    text = f"üíº **–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:**\n\n"
    for vacancy in vacancies[:10]:
        text += f"üî∏ **{vacancy.title}**\n"
        text += f"üè¢ {vacancy.company or '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        if vacancy.salary_range:
            text += f"üí∞ {vacancy.salary_range}\n"
        text += f"üìç {vacancy.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        if vacancy.description:
            text += f"üìù {vacancy.description[:100]}...\n"
        if vacancy.contact_info:
            text += f"üìû {vacancy.contact_info}\n"
        text += "\n"
    
    text += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="vacancies")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    
    try:
        await callback.message.edit_text(text, reply_markup=back_keyboard, parse_mode="Markdown")
    except Exception:
        await callback.answer("üíº –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω")

@router.callback_query(F.data == "projects")
async def show_projects(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Project)
            .options(selectinload(Project.contact))
            .where(Project.is_active == True)
            .order_by(Project.created_at.desc())
        )
        projects = result.scalars().all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    current_time = datetime.now().strftime("%H:%M")
    
    if not projects:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="projects")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        text = f"üöÄ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
        try:
            await callback.message.edit_text(text, reply_markup=back_keyboard)
        except Exception:
            await callback.answer("üöÄ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
        return
    
    text = f"üöÄ **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:**\n\n"
    for project in projects[:10]:
        status_emoji = {"discussion": "üí¨", "development": "‚öôÔ∏è", "completed": "‚úÖ"}
        status_text = {"discussion": "–û–±—Å—É–∂–¥–µ–Ω–∏–µ", "development": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω"}
        
        text += f"üî∏ **{project.title}**\n"
        text += f"{status_emoji.get(project.status, 'üìã')} {status_text.get(project.status, project.status)}\n"
        if project.description:
            text += f"üìù {project.description[:100]}...\n"
        if project.required_skills:
            text += f"üõ† –ù—É–∂–Ω—ã: {project.required_skills[:50]}...\n"
        text += f"üìÖ {project.created_at.strftime('%d.%m.%Y')}\n\n"
    
    text += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="projects")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    
    try:
        await callback.message.edit_text(text, reply_markup=back_keyboard, parse_mode="Markdown")
    except Exception:
        await callback.answer("üöÄ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="events")],
        [InlineKeyboardButton(text="üë®‚Äçüè´ –ú–µ–Ω—Ç–æ—Ä—ã", callback_data="mentors")],
        [InlineKeyboardButton(text="üìö –õ–µ–∫—Ü–∏–∏", callback_data="lectures")],
        [InlineKeyboardButton(text="üíº –í–∞–∫–∞–Ω—Å–∏–∏", callback_data="vacancies")],
        [InlineKeyboardButton(text="üöÄ –ü—Ä–æ–µ–∫—Ç—ã", callback_data="projects")]
    ])
    
    await callback.message.edit_text(
        "üïåüíª **IT Jama'at**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /menu (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é)
@router.message(Command("menu"))
async def menu_command(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="events")],
        [InlineKeyboardButton(text="üë®‚Äçüè´ –ú–µ–Ω—Ç–æ—Ä—ã", callback_data="mentors")],
        [InlineKeyboardButton(text="üìö –õ–µ–∫—Ü–∏–∏", callback_data="lectures")],
        [InlineKeyboardButton(text="üíº –í–∞–∫–∞–Ω—Å–∏–∏", callback_data="vacancies")],
        [InlineKeyboardButton(text="üöÄ –ü—Ä–æ–µ–∫—Ç—ã", callback_data="projects")]
    ])
    
    await message.answer(
        "üïåüíª **IT Jama'at**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )