from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, and_
from sqlalchemy.orm import selectinload
from database.database import AsyncSessionLocal
from database.models import User, Mentor, Event, Lecture, Vacancy, Project
import os
from datetime import datetime, timedelta

admin_router = Router()

ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))

class AdminStates(StatesGroup):
    adding_mentor = State()
    mentor_name = State()
    mentor_bio = State()
    mentor_specialization = State()
    mentor_contact = State()
    
    adding_event = State()
    event_title = State()
    event_description = State()
    event_datetime = State()
    event_location = State()
    
    # States for editing events
    editing_event = State()
    edit_event_title = State()
    edit_event_description = State()
    edit_event_datetime = State()
    edit_event_location = State()
    edit_event_mentors = State()

async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

@admin_router.message(Command("admin"))
async def admin_panel(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="admin_add_mentor")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="admin_remove_mentor")],
        [InlineKeyboardButton(text="üìÖ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="admin_add_event")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="admin_edit_event")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="admin_delete_event")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ])
    
    await message.answer("üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**", reply_markup=keyboard, parse_mode="Markdown")

@admin_router.callback_query(F.data == "admin_add_mentor")
async def start_add_mentor(callback: CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        return
    
    await callback.message.edit_text("üë®‚Äçüè´ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞:")
    await state.set_state(AdminStates.mentor_name)

@admin_router.message(AdminStates.mentor_name)
async def get_mentor_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–µ–Ω—Ç–æ—Ä–∞:")
    await state.set_state(AdminStates.mentor_specialization)

@admin_router.message(AdminStates.mentor_specialization)
async def get_mentor_specialization(message: Message, state: FSMContext):
    await state.update_data(specialization=message.text)
    await message.answer("üìñ –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä–∞:")
    await state.set_state(AdminStates.mentor_bio)

@admin_router.message(AdminStates.mentor_bio)
async def get_mentor_bio(message: Message, state: FSMContext):
    await state.update_data(bio=message.text)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–Ω—Ç–æ—Ä–∞:")
    await state.set_state(AdminStates.mentor_contact)

@admin_router.message(AdminStates.mentor_contact)
async def save_mentor(message: Message, state: FSMContext):
    data = await state.get_data()
    
    async with AsyncSessionLocal() as session:
        mentor = Mentor(
            name=data['name'],
            specialization=data['specialization'],
            bio=data['bio'],
            contact_info=message.text
        )
        session.add(mentor)
        await session.commit()
    
    await message.answer(f"‚úÖ –ú–µ–Ω—Ç–æ—Ä **{data['name']}** —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode="Markdown")
    await state.clear()

@admin_router.callback_query(F.data == "admin_add_event")
async def start_add_event(callback: CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_event")]
    ])
    
    await callback.message.edit_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=keyboard)
    await state.set_state(AdminStates.event_title)

@admin_router.message(AdminStates.event_title)
async def get_event_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_event")]
    ])
    
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=keyboard)
    await state.set_state(AdminStates.event_description)

@admin_router.message(AdminStates.event_description)
async def get_event_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_event")]
    ])
    
    await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:", reply_markup=keyboard)
    await state.set_state(AdminStates.event_datetime)

@admin_router.message(AdminStates.event_datetime)
async def get_event_datetime(message: Message, state: FSMContext):
    try:
        event_datetime = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(datetime=event_datetime)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_event")]
        ])
        
        await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:", reply_markup=keyboard)
        await state.set_state(AdminStates.event_location)
    except ValueError:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_event")]
        ])
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú", reply_markup=keyboard)

@admin_router.message(AdminStates.event_location)
async def get_event_location(message: Message, state: FSMContext):
    await state.update_data(location=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Mentor).where(Mentor.is_active == True)
        )
        mentors = result.scalars().all()
    
    if not mentors:
        # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–Ω—Ç–æ—Ä–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±–µ–∑ –º–µ–Ω—Ç–æ—Ä–∞
        await save_event_without_mentor(message, state)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω—Ç–æ—Ä–∞–º–∏
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ë–µ–∑ –º–µ–Ω—Ç–æ—Ä–∞"
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚ùå –ë–µ–∑ –º–µ–Ω—Ç–æ—Ä–∞", callback_data="select_mentor_none")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—Ç–æ—Ä–æ–≤
    for mentor in mentors:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"üë®‚Äçüè´ {mentor.name} ({mentor.specialization})",
                callback_data=f"select_mentor_{mentor.id}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_event")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.answer(
        "üë®‚Äçüè´ **–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—Ç–æ—Ä–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:**\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞ —Å–µ–π—á–∞—Å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±–µ–∑ –º–µ–Ω—Ç–æ—Ä–∞.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@admin_router.callback_query(F.data.startswith("select_mentor_"))
async def select_mentor_for_event(callback: CallbackQuery, state: FSMContext):
    if callback.data == "select_mentor_none":
        mentor_id = None
        mentor_name = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    else:
        mentor_id = int(callback.data.split("_")[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–µ–Ω—Ç–æ—Ä–∞
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Mentor).where(Mentor.id == mentor_id)
            )
            mentor = result.scalar_one()
            mentor_name = mentor.name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    data = await state.get_data()
    
    async with AsyncSessionLocal() as session:
        event = Event(
            title=data['title'],
            description=data['description'],
            date_time=data['datetime'],
            location=data['location'],
            mentor_id=mentor_id,
            is_active=True
        )
        session.add(event)
        await session.commit()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = "‚úÖ **–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!**\n\n"
    confirmation_text += f"üìÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {data['title']}\n"
    confirmation_text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {data['description']}\n"
    confirmation_text += f"‚è∞ **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {data['datetime'].strftime('%d.%m.%Y %H:%M')}\n"
    confirmation_text += f"üìç **–ú–µ—Å—Ç–æ:** {data['location']}\n"
    confirmation_text += f"üë®‚Äçüè´ **–ú–µ–Ω—Ç–æ—Ä:** {mentor_name}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîß –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(confirmation_text, reply_markup=keyboard, parse_mode="Markdown")
    await state.clear()

async def save_event_without_mentor(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±–µ–∑ –º–µ–Ω—Ç–æ—Ä–∞"""
    data = await state.get_data()
    
    async with AsyncSessionLocal() as session:
        event = Event(
            title=data['title'],
            description=data['description'],
            date_time=data['datetime'],
            location=data['location'],
            mentor_id=None,
            is_active=True
        )
        session.add(event)
        await session.commit()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = "‚úÖ **–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!**\n\n"
    confirmation_text += f"üìÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {data['title']}\n"
    confirmation_text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {data['description']}\n"
    confirmation_text += f"‚è∞ **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {data['datetime'].strftime('%d.%m.%Y %H:%M')}\n"
    confirmation_text += f"üìç **–ú–µ—Å—Ç–æ:** {data['location']}\n"
    confirmation_text += f"üë®‚Äçüè´ **–ú–µ–Ω—Ç–æ—Ä:** –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîß –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])
    
    await message.answer(confirmation_text, reply_markup=keyboard, parse_mode="Markdown")
    await state.clear()

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.callback_query(F.data == "cancel_add_event")
async def cancel_add_event(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="admin_add_mentor")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="admin_remove_mentor")],
        [InlineKeyboardButton(text="üìÖ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="admin_add_event")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="admin_edit_event")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="admin_delete_event")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ])
    
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\nüîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**", 
        reply_markup=keyboard, 
        parse_mode="Markdown"
    )

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
@admin_router.callback_query(F.data == "admin_edit_event")
async def select_event_to_edit(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        return
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Event)
            .options(selectinload(Event.mentor))
            .where(Event.is_active == True)
            .order_by(Event.date_time)
        )
        events = result.scalars().all()
    
    if not events:
        await callback.message.edit_text("üìÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    keyboard_buttons = []
    for event in events[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        event_text = f"{event.title} ({event.date_time.strftime('%d.%m %H:%M')})"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=event_text[:50] + "...",
                callback_data=f"show_edit_options_{event.id}"
            )
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback.message.edit_text(
        "‚úèÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@admin_router.callback_query(F.data.startswith("show_edit_options_"))
async def show_edit_options(callback: CallbackQuery):
    event_id = int(callback.data.split("_")[-1])
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Event).options(selectinload(Event.mentor)).where(Event.id == event_id)
        )
        event = result.scalar_one_or_none()
    
    if not event:
        await callback.message.edit_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    mentor_name = event.mentor.name if event.mentor else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    text = f"üìÖ **–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:** {event.title}\n"
    text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {event.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    text += f"‚è∞ **–î–∞—Ç–∞:** {event.date_time.strftime('%d.%m.%Y %H:%M')}\n"
    text += f"üìç **–ú–µ—Å—Ç–æ:** {event.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    text += f"üë®‚Äçüè´ **–ú–µ–Ω—Ç–æ—Ä:** {mentor_name}\n\n"
    text += "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title_{event_id}")],
        [InlineKeyboardButton(text="üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc_{event_id}")],
        [InlineKeyboardButton(text="‚è∞ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", callback_data=f"edit_datetime_{event_id}")],
        [InlineKeyboardButton(text="üìç –ú–µ—Å—Ç–æ", callback_data=f"edit_location_{event_id}")],
        [InlineKeyboardButton(text="üë®‚Äçüè´ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data=f"edit_mentor_{event_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="admin_edit_event")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@admin_router.callback_query(F.data.startswith("edit_title_"))
async def edit_event_title(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[-1])
    await state.update_data(editing_event_id=event_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"show_edit_options_{event_id}")]
    ])
    
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=keyboard)
    await state.set_state(AdminStates.edit_event_title)

@admin_router.message(AdminStates.edit_event_title)
async def save_edited_title(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data['editing_event_id']
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Event).where(Event.id == event_id))
        event = result.scalar_one()
        event.title = message.text
        await session.commit()
    
    await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: **{message.text}**", parse_mode="Markdown")
    await state.clear()

@admin_router.callback_query(F.data.startswith("edit_desc_"))
async def edit_event_description(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[-1])
    await state.update_data(editing_event_id=event_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"show_edit_options_{event_id}")]
    ])
    
    await callback.message.edit_text("üìÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=keyboard)
    await state.set_state(AdminStates.edit_event_description)

@admin_router.message(AdminStates.edit_event_description)
async def save_edited_description(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data['editing_event_id']
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Event).where(Event.id == event_id))
        event = result.scalar_one()
        event.description = message.text
        await session.commit()
    
    await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    await state.clear()

@admin_router.callback_query(F.data.startswith("edit_datetime_"))
async def edit_event_datetime(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[-1])
    await state.update_data(editing_event_id=event_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"show_edit_options_{event_id}")]
    ])
    
    await callback.message.edit_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:", reply_markup=keyboard)
    await state.set_state(AdminStates.edit_event_datetime)

@admin_router.message(AdminStates.edit_event_datetime)
async def save_edited_datetime(message: Message, state: FSMContext):
    try:
        new_datetime = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        data = await state.get_data()
        event_id = data['editing_event_id']
        
        async with AsyncSessionLocal() as session:
            result = await session.execute(select(Event).where(Event.id == event_id))
            event = result.scalar_one()
            event.date_time = new_datetime
            await session.commit()
        
        await message.answer(f"‚úÖ –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: **{new_datetime.strftime('%d.%m.%Y %H:%M')}**", parse_mode="Markdown")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")

@admin_router.callback_query(F.data.startswith("edit_location_"))
async def edit_event_location(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[-1])
    await state.update_data(editing_event_id=event_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"show_edit_options_{event_id}")]
    ])
    
    await callback.message.edit_text("üìç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(AdminStates.edit_event_location)

@admin_router.message(AdminStates.edit_event_location)
async def save_edited_location(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data['editing_event_id']
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Event).where(Event.id == event_id))
        event = result.scalar_one()
        event.location = message.text
        await session.commit()
    
    await message.answer(f"‚úÖ –ú–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: **{message.text}**", parse_mode="Markdown")
    await state.clear()

@admin_router.callback_query(F.data.startswith("edit_mentor_"))
async def edit_event_mentor(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[-1])
    await state.update_data(editing_event_id=event_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Event).options(selectinload(Event.mentor)).where(Event.id == event_id)
        )
        event = result.scalar_one()
        current_mentor_id = event.mentor.id if event.mentor else None
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤
        result = await session.execute(
            select(Mentor).where(Mentor.is_active == True)
        )
        all_mentors = result.scalars().all()
    
    if not all_mentors:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω—Ç–æ—Ä–∞–º–∏
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ë–µ–∑ –º–µ–Ω—Ç–æ—Ä–∞"
    no_mentor_emoji = "‚úÖ" if current_mentor_id is None else "‚ùå"
    keyboard_buttons.append([
        InlineKeyboardButton(
            text=f"{no_mentor_emoji} –ë–µ–∑ –º–µ–Ω—Ç–æ—Ä–∞",
            callback_data=f"assign_mentor_none_{event_id}"
        )
    ])
    
    for mentor in all_mentors:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–æ—á–∫—É –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –º–µ–Ω—Ç–æ—Ä
        emoji = "‚úÖ" if mentor.id == current_mentor_id else "üë®‚Äçüè´"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"{emoji} {mentor.name}",
                callback_data=f"assign_mentor_{mentor.id}_{event_id}"
            )
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"show_edit_options_{event_id}")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    current_mentor_text = event.mentor.name if event.mentor else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    await callback.message.edit_text(
        f"üë®‚Äçüè´ **–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é**\n\n"
        f"–¢–µ–∫—É—â–∏–π –º–µ–Ω—Ç–æ—Ä: **{current_mentor_text}**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@admin_router.callback_query(F.data.startswith("assign_mentor_"))
async def assign_mentor_to_event(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    if parts[2] == "none":
        mentor_id = None
        event_id = int(parts[3])
    else:
        mentor_id = int(parts[2])
        event_id = int(parts[3])
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Event).where(Event.id == event_id)
        )
        event = result.scalar_one()
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –º–µ–Ω—Ç–æ—Ä–∞
        event.mentor_id = mentor_id
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–µ–Ω—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        mentor_name = "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        if mentor_id:
            result = await session.execute(
                select(Mentor).where(Mentor.id == mentor_id)
            )
            mentor = result.scalar_one()
            mentor_name = mentor.name
    
    await callback.message.edit_text(
        f"‚úÖ –ú–µ–Ω—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
        f"–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –º–µ–Ω—Ç–æ—Ä: **{mentor_name}**",
        parse_mode="Markdown"
    )
    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
@admin_router.callback_query(F.data == "admin_delete_event")
async def select_event_to_delete(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        return
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Event)
            .options(selectinload(Event.mentor))
            .where(Event.is_active == True)
            .order_by(Event.date_time)
        )
        events = result.scalars().all()
    
    if not events:
        await callback.message.edit_text("üìÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    keyboard_buttons = []
    for event in events[:10]:
        event_text = f"{event.title} ({event.date_time.strftime('%d.%m %H:%M')})"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=event_text[:50] + "...",
                callback_data=f"delete_event_{event.id}"
            )
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback.message.edit_text(
        "üóë **–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@admin_router.callback_query(F.data.startswith("delete_event_"))
async def confirm_delete_event(callback: CallbackQuery):
    event_id = int(callback.data.split("_")[-1])
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Event).where(Event.id == event_id)
        )
        event = result.scalar_one_or_none()
    
    if not event:
        await callback.message.edit_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    text = f"üóë **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:**\n\n"
    text += f"üìÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {event.title}\n"
    text += f"‚è∞ **–î–∞—Ç–∞:** {event.date_time.strftime('%d.%m.%Y %H:%M')}\n"
    text += f"üìç **–ú–µ—Å—Ç–æ:** {event.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
    text += "‚ö†Ô∏è **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!**"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{event_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_delete_event")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@admin_router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_event_confirmed(callback: CallbackQuery):
    event_id = int(callback.data.split("_")[-1])
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Event).where(Event.id == event_id))
        event = result.scalar_one_or_none()
        
        if event:
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –≤–º–µ—Å—Ç–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            event.is_active = False
            await session.commit()
            
            await callback.message.edit_text(
                f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ **{event.title}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# –£–¥–∞–ª–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä–æ–≤
@admin_router.callback_query(F.data == "admin_remove_mentor")
async def select_mentor_to_remove(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        return
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Mentor).where(Mentor.is_active == True)
        )
        mentors = result.scalars().all()
    
    if not mentors:
        await callback.message.edit_text("üë®‚Äçüè´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    keyboard_buttons = []
    for mentor in mentors:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"{mentor.name} ({mentor.specialization})",
                callback_data=f"remove_mentor_{mentor.id}"
            )
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback.message.edit_text(
        "üë®‚Äçüè´ **–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@admin_router.callback_query(F.data.startswith("remove_mentor_"))
async def confirm_remove_mentor(callback: CallbackQuery):
    mentor_id = int(callback.data.split("_")[-1])
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Mentor).where(Mentor.id == mentor_id)
        )
        mentor = result.scalar_one_or_none()
    
    if not mentor:
        await callback.message.edit_text("‚ùå –ú–µ–Ω—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    text = f"üóë **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä–∞:**\n\n"
    text += f"üë®‚Äçüè´ **–ò–º—è:** {mentor.name}\n"
    text += f"üíº **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:** {mentor.specialization}\n\n"
    text += "‚ö†Ô∏è **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!**"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_remove_mentor_{mentor_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_remove_mentor")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@admin_router.callback_query(F.data.startswith("confirm_remove_mentor_"))
async def remove_mentor_confirmed(callback: CallbackQuery):
    mentor_id = int(callback.data.split("_")[-1])
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Mentor).where(Mentor.id == mentor_id))
        mentor = result.scalar_one_or_none()
        
        if mentor:
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
            mentor.is_active = False
            await session.commit()
            
            await callback.message.edit_text(
                f"‚úÖ –ú–µ–Ω—Ç–æ—Ä **{mentor.name}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text("‚ùå –ú–µ–Ω—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")


@admin_router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        return
    
    async with AsyncSessionLocal() as session:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_result = await session.execute(select(User))
        total_users = len(users_result.scalars().all())
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤
        mentors_result = await session.execute(
            select(Mentor).where(Mentor.is_active == True)
        )
        active_mentors = len(mentors_result.scalars().all())
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        events_result = await session.execute(
            select(Event).where(Event.is_active == True)
        )
        active_events = len(events_result.scalars().all())
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–¥—É—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        future_events_result = await session.execute(
            select(Event).where(
                and_(Event.is_active == True, Event.date_time > datetime.utcnow())
            )
        )
        future_events = len(future_events_result.scalars().all())
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        past_events_result = await session.execute(
            select(Event).where(
                and_(Event.is_active == True, Event.date_time <= datetime.utcnow())
            )
        )
        past_events = len(past_events_result.scalars().all())
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫—Ü–∏–π
        lectures_result = await session.execute(select(Lecture))
        total_lectures = len(lectures_result.scalars().all())
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º –∏ –ø—Ä–æ–µ–∫—Ç–∞–º
        active_vacancies = 0
        active_projects = 0
        discussion_count = 0
        development_count = 0
        completed_count = 0
        programming_count = 0
        security_count = 0
        data_count = 0
        web_count = 0
        mobile_count = 0
        
        try:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
            vacancies_result = await session.execute(
                select(Vacancy).where(Vacancy.is_active == True)
            )
            active_vacancies = len(vacancies_result.scalars().all())
        except Exception:
            # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ Vacancy –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            pass
        
        try:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            projects_result = await session.execute(
                select(Project).where(Project.is_active == True)
            )
            active_projects = len(projects_result.scalars().all())
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –ø—Ä–æ–µ–∫—Ç–æ–≤
            discussion_projects = await session.execute(
                select(Project).where(
                    and_(Project.is_active == True, Project.status == 'discussion')
                )
            )
            discussion_count = len(discussion_projects.scalars().all())
            
            development_projects = await session.execute(
                select(Project).where(
                    and_(Project.is_active == True, Project.status == 'development')
                )
            )
            development_count = len(development_projects.scalars().all())
            
            completed_projects = await session.execute(
                select(Project).where(
                    and_(Project.is_active == True, Project.status == 'completed')
                )
            )
            completed_count = len(completed_projects.scalars().all())
        except Exception:
            # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ Project –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            pass
        
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ª–µ–∫—Ü–∏–π
            programming_lectures = await session.execute(
                select(Lecture).where(Lecture.category == '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ')
            )
            programming_count = len(programming_lectures.scalars().all())
            
            security_lectures = await session.execute(
                select(Lecture).where(Lecture.category == '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å')
            )
            security_count = len(security_lectures.scalars().all())
            
            data_lectures = await session.execute(
                select(Lecture).where(Lecture.category == 'Data Science')
            )
            data_count = len(data_lectures.scalars().all())
            
            web_lectures = await session.execute(
                select(Lecture).where(Lecture.category == 'Web —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')
            )
            web_count = len(web_lectures.scalars().all())
            
            mobile_lectures = await session.execute(
                select(Lecture).where(Lecture.category == 'Mobile —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')
            )
            mobile_count = len(mobile_lectures.scalars().all())
        except Exception:
            # –ï—Å–ª–∏ —É Lecture –Ω–µ—Ç –ø–æ–ª—è category, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            pass
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ IT Jama'at**\n\n"
    
    text += "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤: {active_mentors}\n\n"
    
    text += "üìÖ **–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:**\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_events}\n"
    text += f"‚Ä¢ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö: {future_events}\n"
    text += f"‚Ä¢ –ü—Ä–æ—à–µ–¥—à–∏—Ö: {past_events}\n\n"
    
    text += "üìö **–õ–µ–∫—Ü–∏–∏:**\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –ª–µ–∫—Ü–∏–π: {total_lectures}\n"
    if programming_count > 0:
        text += f"‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: {programming_count}\n"
    if security_count > 0:
        text += f"‚Ä¢ –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {security_count}\n"
    if data_count > 0:
        text += f"‚Ä¢ Data Science: {data_count}\n"
    if web_count > 0:
        text += f"‚Ä¢ Web —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: {web_count}\n"
    if mobile_count > 0:
        text += f"‚Ä¢ Mobile —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: {mobile_count}\n"
    
    text += "\nüíº **–†–∞–±–æ—Ç–∞:**\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {active_vacancies}\n\n"
    
    text += "üöÄ **–ü—Ä–æ–µ–∫—Ç—ã:**\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_projects}\n"
    if discussion_count > 0:
        text += f"‚Ä¢ –ù–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏: {discussion_count}\n"
    if development_count > 0:
        text += f"‚Ä¢ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: {development_count}\n"
    if completed_count > 0:
        text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_count}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º", callback_data="daily_stats")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")


@admin_router.callback_query(F.data == "detailed_stats")
async def show_detailed_stats(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        return
    
    async with AsyncSessionLocal() as session:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = datetime.utcnow() - timedelta(days=30)
        recent_users = await session.execute(
            select(User).where(User.created_at >= thirty_days_ago)
        )
        recent_users_count = len(recent_users.scalars().all())
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        recent_events = await session.execute(
            select(Event).where(
                and_(Event.is_active == True, Event.date_time >= thirty_days_ago)
            )
        )
        recent_events_count = len(recent_events.scalars().all())
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–µ–∫—Ü–∏—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        recent_lectures_count = 0
        recent_vacancies_count = 0
        recent_projects_count = 0
        
        try:
            recent_lectures = await session.execute(
                select(Lecture).where(Lecture.uploaded_at >= thirty_days_ago)
            )
            recent_lectures_count = len(recent_lectures.scalars().all())
        except Exception:
            pass
        
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            recent_vacancies = await session.execute(
                select(Vacancy).where(Vacancy.posted_at >= thirty_days_ago)
            )
            recent_vacancies_count = len(recent_vacancies.scalars().all())
        except Exception:
            pass
        
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            recent_projects = await session.execute(
                select(Project).where(Project.created_at >= thirty_days_ago)
            )
            recent_projects_count = len(recent_projects.scalars().all())
        except Exception:
            pass
        
        # –¢–æ–ø-5 –º–µ–Ω—Ç–æ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        mentor_events = {}
        try:
            top_mentors = await session.execute(
                select(Mentor.name, Event.mentor_id)
                .join(Event)
                .where(Event.is_active == True)
                .group_by(Mentor.name, Event.mentor_id)
            )
            
            for mentor_name, mentor_id in top_mentors:
                mentor_events_count = await session.execute(
                    select(Event).where(
                        and_(Event.mentor_id == mentor_id, Event.is_active == True)
                    )
                )
                mentor_events[mentor_name] = len(mentor_events_count.scalars().all())
        except Exception:
            pass
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω—Ç–æ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        sorted_mentors = sorted(mentor_events.items(), key=lambda x: x[1], reverse=True)[:5]
    
    text = "üìà **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)**\n\n"
    
    text += "üìä **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
    text += f"‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {recent_users_count}\n"
    text += f"‚Ä¢ –ù–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {recent_events_count}\n"
    text += f"‚Ä¢ –ù–æ–≤—ã—Ö –ª–µ–∫—Ü–∏–π: {recent_lectures_count}\n"
    text += f"‚Ä¢ –ù–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {recent_vacancies_count}\n"
    text += f"‚Ä¢ –ù–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {recent_projects_count}\n\n"
    
    if sorted_mentors:
        text += "üèÜ **–¢–æ–ø –º–µ–Ω—Ç–æ—Ä–æ–≤ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º:**\n"
        for i, (mentor_name, count) in enumerate(sorted_mentors, 1):
            text += f"{i}. {mentor_name}: {count} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")


@admin_router.callback_query(F.data == "daily_stats")
async def show_daily_stats(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        return
    
    async with AsyncSessionLocal() as session:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
        tomorrow = today + timedelta(days=1)
        
        today_users = await session.execute(
            select(User).where(
                and_(User.created_at >= today, User.created_at < tomorrow)
            )
        )
        today_users_count = len(today_users.scalars().all())
        
        today_events = await session.execute(
            select(Event).where(
                and_(Event.date_time >= today, Event.date_time < tomorrow, Event.is_active == True)
            )
        )
        today_events_count = len(today_events.scalars().all())
        
        today_lectures_count = 0
        today_vacancies_count = 0
        today_projects_count = 0
        
        try:
            today_lectures = await session.execute(
                select(Lecture).where(
                    and_(Lecture.uploaded_at >= today, Lecture.uploaded_at < tomorrow)
                )
            )
            today_lectures_count = len(today_lectures.scalars().all())
        except Exception:
            pass
        
        try:
            today_vacancies = await session.execute(
                select(Vacancy).where(
                    and_(Vacancy.posted_at >= today, Vacancy.posted_at < tomorrow)
                )
            )
            today_vacancies_count = len(today_vacancies.scalars().all())
        except Exception:
            pass
        
        try:
            today_projects = await session.execute(
                select(Project).where(
                    and_(Project.created_at >= today, Project.created_at < tomorrow)
                )
            )
            today_projects_count = len(today_projects.scalars().all())
        except Exception:
            pass
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞
        yesterday = today - timedelta(days=1)
        
        yesterday_users = await session.execute(
            select(User).where(
                and_(User.created_at >= yesterday, User.created_at < today)
            )
        )
        yesterday_users_count = len(yesterday_users.scalars().all())
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
        week_ago = today - timedelta(days=7)
        
        week_users = await session.execute(
            select(User).where(User.created_at >= week_ago)
        )
        week_users_count = len(week_users.scalars().all())
        
        week_events = await session.execute(
            select(Event).where(
                and_(Event.date_time >= week_ago, Event.is_active == True)
            )
        )
        week_events_count = len(week_events.scalars().all())
    
    text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º**\n\n"
    
    text += "üìÖ **–°–µ–≥–æ–¥–Ω—è:**\n"
    text += f"‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {today_users_count}\n"
    text += f"‚Ä¢ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {today_events_count}\n"
    text += f"‚Ä¢ –ù–æ–≤—ã—Ö –ª–µ–∫—Ü–∏–π: {today_lectures_count}\n"
    text += f"‚Ä¢ –ù–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {today_vacancies_count}\n"
    text += f"‚Ä¢ –ù–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {today_projects_count}\n\n"
    
    text += "üìÖ **–í—á–µ—Ä–∞:**\n"
    text += f"‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {yesterday_users_count}\n\n"
    
    text += "üìÖ **–ó–∞ –Ω–µ–¥–µ–ª—é:**\n"
    text += f"‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {week_users_count}\n"
    text += f"‚Ä¢ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {week_events_count}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")


@admin_router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="admin_add_mentor")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="admin_remove_mentor")],
        [InlineKeyboardButton(text="üìÖ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="admin_add_event")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="admin_edit_event")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="admin_delete_event")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ])
    
    await callback.message.edit_text("üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**", reply_markup=keyboard, parse_mode="Markdown")
