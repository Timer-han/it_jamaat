from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from database.database import AsyncSessionLocal
from database.models import User, Mentor, Event, Lecture
import os
from datetime import datetime


admin_router = Router()

ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))

class AdminStates(StatesGroup):
    adding_mentor = State()
    mentor_name = State()
    mentor_bio = State()
    mentor_specialization = State()
    mentor_contact = State()
    
    adding_event = State()
    event_title = State()
    event_description = State()
    event_datetime = State()
    event_location = State()
    
    # States for editing events
    editing_event = State()
    edit_event_title = State()
    edit_event_description = State()
    edit_event_datetime = State()
    edit_event_location = State()

async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

@admin_router.message(Command("admin"))
async def admin_panel(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="admin_add_mentor")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="admin_remove_mentor")],
        [InlineKeyboardButton(text="üìÖ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="admin_add_event")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="admin_edit_event")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="admin_delete_event")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ])
    
    await message.answer("üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**", reply_markup=keyboard, parse_mode="Markdown")

@admin_router.callback_query(F.data == "admin_add_mentor")
async def start_add_mentor(callback: CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        return
    
    await callback.message.edit_text("üë®‚Äçüè´ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞:")
    await state.set_state(AdminStates.mentor_name)

@admin_router.message(AdminStates.mentor_name)
async def get_mentor_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–µ–Ω—Ç–æ—Ä–∞:")
    await state.set_state(AdminStates.mentor_specialization)

@admin_router.message(AdminStates.mentor_specialization)
async def get_mentor_specialization(message: Message, state: FSMContext):
    await state.update_data(specialization=message.text)
    await message.answer("üìñ –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä–∞:")
    await state.set_state(AdminStates.mentor_bio)

@admin_router.message(AdminStates.mentor_bio)
async def get_mentor_bio(message: Message, state: FSMContext):
    await state.update_data(bio=message.text)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–Ω—Ç–æ—Ä–∞:")
    await state.set_state(AdminStates.mentor_contact)

@admin_router.message(AdminStates.mentor_contact)
async def save_mentor(message: Message, state: FSMContext):
    data = await state.get_data()
    
    async with AsyncSessionLocal() as session:
        mentor = Mentor(
            name=data['name'],
            specialization=data['specialization'],
            bio=data['bio'],
            contact_info=message.text
        )
        session.add(mentor)
        await session.commit()
    
    await message.answer(f"‚úÖ –ú–µ–Ω—Ç–æ—Ä **{data['name']}** —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode="Markdown")
    await state.clear()

@admin_router.callback_query(F.data == "admin_add_event")
async def start_add_event(callback: CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        return
    
    await callback.message.edit_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(AdminStates.event_title)

@admin_router.message(AdminStates.event_title)
async def get_event_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(AdminStates.event_description)

@admin_router.message(AdminStates.event_description)
async def get_event_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:")
    await state.set_state(AdminStates.event_datetime)

@admin_router.message(AdminStates.event_datetime)
async def get_event_datetime(message: Message, state: FSMContext):
    try:
        event_datetime = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(datetime=event_datetime)
        await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:")
        await state.set_state(AdminStates.event_location)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")

@admin_router.message(AdminStates.event_location)
async def save_event(message: Message, state: FSMContext):
    data = await state.get_data()
    
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one()
        
        event = Event(
            title=data['title'],
            description=data['description'],
            date_time=data['datetime'],
            location=message.text,
            created_by=user.id
        )
        session.add(event)
        await session.commit()
    
    await message.answer(f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ **{data['title']}** —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", parse_mode="Markdown")
    await state.clear()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
@admin_router.callback_query(F.data == "admin_edit_event")
async def select_event_to_edit(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        return
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Event)
            .options(selectinload(Event.mentor))
            .where(Event.is_active == True)
            .order_by(Event.date_time)
        )
        events = result.scalars().all()
    
    if not events:
        await callback.message.edit_text("üìÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    keyboard_buttons = []
    for event in events[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        event_text = f"{event.title} ({event.date_time.strftime('%d.%m %H:%M')})"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=event_text[:50] + "...",
                callback_data=f"edit_event_{event.id}"
            )
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback.message.edit_text(
        "‚úèÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@admin_router.callback_query(F.data.startswith("edit_event_"))
async def show_edit_options(callback: CallbackQuery):
    event_id = int(callback.data.split("_")[-1])
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Event).options(selectinload(Event.mentor)).where(Event.id == event_id)
        )
        event = result.scalar_one_or_none()
    
    if not event:
        await callback.message.edit_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    mentor_name = event.mentor.name if event.mentor else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    text = f"üìÖ **–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:** {event.title}\n"
    text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {event.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    text += f"‚è∞ **–î–∞—Ç–∞:** {event.date_time.strftime('%d.%m.%Y %H:%M')}\n"
    text += f"üìç **–ú–µ—Å—Ç–æ:** {event.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    text += f"üë®‚Äçüè´ **–ú–µ–Ω—Ç–æ—Ä:** {mentor_name}\n\n"
    text += "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title_{event_id}")],
        [InlineKeyboardButton(text="üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc_{event_id}")],
        [InlineKeyboardButton(text="‚è∞ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", callback_data=f"edit_datetime_{event_id}")],
        [InlineKeyboardButton(text="üìç –ú–µ—Å—Ç–æ", callback_data=f"edit_location_{event_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="admin_edit_event")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@admin_router.callback_query(F.data.startswith("edit_title_"))
async def edit_event_title(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[-1])
    await state.update_data(editing_event_id=event_id)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(AdminStates.edit_event_title)

@admin_router.message(AdminStates.edit_event_title)
async def save_edited_title(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data['editing_event_id']
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Event).where(Event.id == event_id))
        event = result.scalar_one()
        event.title = message.text
        await session.commit()
    
    await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: **{message.text}**", parse_mode="Markdown")
    await state.clear()

@admin_router.callback_query(F.data.startswith("edit_desc_"))
async def edit_event_description(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[-1])
    await state.update_data(editing_event_id=event_id)
    await callback.message.edit_text("üìÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(AdminStates.edit_event_description)

@admin_router.message(AdminStates.edit_event_description)
async def save_edited_description(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data['editing_event_id']
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Event).where(Event.id == event_id))
        event = result.scalar_one()
        event.description = message.text
        await session.commit()
    
    await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    await state.clear()

@admin_router.callback_query(F.data.startswith("edit_datetime_"))
async def edit_event_datetime(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[-1])
    await state.update_data(editing_event_id=event_id)
    await callback.message.edit_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:")
    await state.set_state(AdminStates.edit_event_datetime)

@admin_router.message(AdminStates.edit_event_datetime)
async def save_edited_datetime(message: Message, state: FSMContext):
    try:
        new_datetime = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        data = await state.get_data()
        event_id = data['editing_event_id']
        
        async with AsyncSessionLocal() as session:
            result = await session.execute(select(Event).where(Event.id == event_id))
            event = result.scalar_one()
            event.date_time = new_datetime
            await session.commit()
        
        await message.answer(f"‚úÖ –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: **{new_datetime.strftime('%d.%m.%Y %H:%M')}**", parse_mode="Markdown")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")

@admin_router.callback_query(F.data.startswith("edit_location_"))
async def edit_event_location(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[-1])
    await state.update_data(editing_event_id=event_id)
    await callback.message.edit_text("üìç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:")
    await state.set_state(AdminStates.edit_event_location)

@admin_router.message(AdminStates.edit_event_location)
async def save_edited_location(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data['editing_event_id']
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Event).where(Event.id == event_id))
        event = result.scalar_one()
        event.location = message.text
        await session.commit()
    
    await message.answer(f"‚úÖ –ú–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: **{message.text}**", parse_mode="Markdown")
    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
@admin_router.callback_query(F.data == "admin_delete_event")
async def select_event_to_delete(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        return
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Event)
            .options(selectinload(Event.mentor))
            .where(Event.is_active == True)
            .order_by(Event.date_time)
        )
        events = result.scalars().all()
    
    if not events:
        await callback.message.edit_text("üìÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    keyboard_buttons = []
    for event in events[:10]:
        event_text = f"{event.title} ({event.date_time.strftime('%d.%m %H:%M')})"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=event_text[:50] + "...",
                callback_data=f"delete_event_{event.id}"
            )
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback.message.edit_text(
        "üóë **–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@admin_router.callback_query(F.data.startswith("delete_event_"))
async def confirm_delete_event(callback: CallbackQuery):
    event_id = int(callback.data.split("_")[-1])
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Event).where(Event.id == event_id)
        )
        event = result.scalar_one_or_none()
    
    if not event:
        await callback.message.edit_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    text = f"üóë **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:**\n\n"
    text += f"üìÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {event.title}\n"
    text += f"‚è∞ **–î–∞—Ç–∞:** {event.date_time.strftime('%d.%m.%Y %H:%M')}\n"
    text += f"üìç **–ú–µ—Å—Ç–æ:** {event.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
    text += "‚ö†Ô∏è **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!**"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{event_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_delete_event")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@admin_router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_event_confirmed(callback: CallbackQuery):
    event_id = int(callback.data.split("_")[-1])
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Event).where(Event.id == event_id))
        event = result.scalar_one_or_none()
        
        if event:
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –≤–º–µ—Å—Ç–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            event.is_active = False
            await session.commit()
            
            await callback.message.edit_text(
                f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ **{event.title}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

@admin_router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="admin_add_mentor")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="admin_remove_mentor")],
        [InlineKeyboardButton(text="üìÖ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="admin_add_event")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="admin_edit_event")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="admin_delete_event")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ])
    
    await callback.message.edit_text("üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**", reply_markup=keyboard, parse_mode="Markdown")
